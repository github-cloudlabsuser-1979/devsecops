name: contoso-traders-provisioning-deployment

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      [
        "src/ContosoTraders.Api.Carts/**",
        "src/ContosoTraders.Api.Core/**",
        "src/ContosoTraders.Api.Images/**",
        "src/ContosoTraders.Api.Products/**",
        "src/ContosoTraders.Ui.Website/**",
      ]

env:
  # You can specify any location for `SUB_DEPLOYMENT_REGION`. It's the region where the deployment
  # metadata will be stored, and not where the resource groups will be deployed.
  SUFFIX: 1530041
  ACR_NAME: contosotradersacr
  AKS_CLUSTER_NAME: contoso-traders-aks
  AKS_DNS_LABEL: contoso-traders-products
  AKS_NODES_RESOURCE_GROUP_NAME: contoso-traders-aks-nodes-rg1530041
  AKS_SECRET_NAME_ACR_PASSWORD: contoso-traders-acr-password
  AKS_SECRET_NAME_KV_ENDPOINT: contoso-traders-kv-endpoint
  AKS_SECRET_NAME_MI_CLIENTID: contoso-traders-mi-clientid
  CARTS_ACA_NAME: contoso-traders-carts
  CARTS_ACR_REPOSITORY_NAME: contosotradersapicarts
  CDN_PROFILE_NAME: contoso-traders-cdn
  SUB_DEPLOYMENT_REGION: eastus2
  KV_NAME: contosotraderskv
  PRODUCTS_ACR_REPOSITORY_NAME: contosotradersapiproducts
  PRODUCTS_DB_NAME: productsdb
  PRODUCTS_DB_SERVER_NAME: contoso-traders-products
  PRODUCTS_DB_USER_NAME: localadmin
  PRODUCT_DETAILS_CONTAINER_NAME: product-details
  PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME: contosotradersimg
  PRODUCT_LIST_CONTAINER_NAME: product-list
  PRODUCTS_CDN_ENDPOINT_NAME: contoso-traders-images
  RESOURCE_GROUP_NAME: contosotraders-1530041
  STORAGE_ACCOUNT_NAME: contosotradersimg
  UI_CDN_ENDPOINT_NAME: contoso-traders-ui2
  UI_STORAGE_ACCOUNT_NAME: contosotradersui2
  USER_ASSIGNED_MANAGED_IDENTITY_NAME: contoso-traders-mi-kv-access

jobs:
  deploy-products-api:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.SERVICEPRINCIPAL }}
    # Add the logged-in service principal to the key vault access policy
    - name: add service principal to kv access policy
      uses: azure/CLI@v1
      with:
        failOnStderr: false
        inlineScript: az keyvault set-policy -n ${{ env.KV_NAME }}${{ secrets.ENVIRONMENT }} --secret-permissions get list set --object-id $(az ad sp show --id $(az account show --query "user.name" -o tsv) --query "id" -o tsv)
    - name: install helm
      uses: Azure/setup-helm@v3
      id: install-helm
      with:
        version: v3.9.0
    - name: docker build
      run: docker build src -f ./src/ContosoTraders.Api.Products/Dockerfile -t ${{ env.ACR_NAME }}${{ env.SUFFIX }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}:latest -t ${{ env.ACR_NAME }}${{ env.SUFFIX }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}:${{ github.sha }}
    - name: docker push (to acr)
      run: docker push --all-tags ${{ env.ACR_NAME }}${{ env.SUFFIX }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}
    - name: setup kubectl
      uses: azure/setup-kubectl@v3
    - name: create kubernetes secret (acr password)
      uses: Azure/k8s-create-secret@v4
      with:
        secret-name: ${{ env.AKS_SECRET_NAME_ACR_PASSWORD }}
        container-registry-url: ${{ env.ACR_NAME }}${{ env.SUFFIX }}.azurecr.io
        container-registry-username: ${{ env.ACR_NAME }}${{ env.SUFFIX }}
        container-registry-password: ${{ steps.extract-acr-password.outputs.acrPassword }}
    - name: get managedIdentityClientId
      uses: azure/CLI@v1
      id: get-managedIdentityClientId
      with:
        inlineScript: echo "managedIdentityClientId"="$(az identity show -g ${{ env.RESOURCE_GROUP_NAME }}${{ env.SUFFIX }} --name ${{ env.USER_ASSIGNED_MANAGED_IDENTITY_NAME }}${{ env.SUFFIX }} --query "clientId" -o tsv)" >> $GITHUB_OUTPUT
    - name: create kubernetes secret (kv endpoint)
      uses: Azure/k8s-create-secret@v4
      with:
        secret-type: "generic"
        secret-name: ${{ env.AKS_SECRET_NAME_KV_ENDPOINT }}
        string-data: '{ "${{ env.AKS_SECRET_NAME_KV_ENDPOINT }}" : "https://${{ env.KV_NAME }}${{ env.SUFFIX }}.vault.azure.net/" }'
    - name: create kubernetes secret (managed identity client id)
      uses: Azure/k8s-create-secret@v4
      with:
        secret-type: "generic"
        secret-name: ${{ env.AKS_SECRET_NAME_MI_CLIENTID }}
        string-data: '{ "${{ env.AKS_SECRET_NAME_MI_CLIENTID }}" : "${{ steps.get-managedIdentityClientId.outputs.managedIdentityClientId }}" }'
    - name: substitute tokens in deployment manifest
      uses: cschleiden/replace-tokens@v1.2
      with:
        tokenPrefix: "{"
        tokenSuffix: "}"
        files: ./src/ContosoTraders.Api.Products/Manifests/Deployment.yaml
      env:
        SUFFIX: ${{ env.SUFFIX }}
        AKS_REPLICAS: ${{ env.AKS_REPLICAS }}
        AKS_CPU_LIMIT: ${{ env.AKS_CPU_LIMIT }}
        AKS_MEMORY_LIMIT: ${{ env.AKS_MEMORY_LIMIT }}
    - name: lint deployment manifest
      uses: azure/k8s-lint@v2.0
      with:
        manifests: ./src/ContosoTraders.Api.Products/Manifests/Deployment.yaml
    - name: apply deployment manifest
      uses: Azure/k8s-deploy@v4
      with:
        manifests: ./src/ContosoTraders.Api.Products/Manifests/Deployment.yaml
        images: ${{ env.ACR_NAME }}${{ env.SUFFIX }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}:${{ github.sha }}
        imagepullsecrets: ${{ env.AKS_SECRET_NAME_ACR_PASSWORD }}
        force: true
    - name: apply service manifest
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/Service.yaml
        force: true
    # setup chaos mesh
    - name: apply namespace manifest (chaos-testing)
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/NamespaceChaosTesting.yaml
        force: true
    - name: setup chaos mesh
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }}${{ env.SUFFIX }} --name ${{ env.AKS_CLUSTER_NAME }}${{ env.SUFFIX }}
        ${{ steps.install-helm.outputs.helm-path }} repo add chaos-mesh https://charts.chaos-mesh.org
        ${{ steps.install-helm.outputs.helm-path }} repo update
        ${{ steps.install-helm.outputs.helm-path }} upgrade --install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock
    # create the ingress controller
    - name: create ingress controller
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }}${{ env.SUFFIX }} --name ${{ env.AKS_CLUSTER_NAME }}${{ env.SUFFIX }}
        ${{ steps.install-helm.outputs.helm-path }} repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        ${{ steps.install-helm.outputs.helm-path }} repo update
        ${{ steps.install-helm.outputs.helm-path }} upgrade --install --wait --timeout=1h nginx-ingress ingress-nginx/ingress-nginx \
          --set controller.replicaCount=1 \
          --set controller.nodeSelector."kubernetes\.io/os"=linux \
          --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux \
          --set controller.service.externalTrafficPolicy=Local
    - name: set dns label on public ip
      uses: azure/CLI@v1
      with:
        inlineScript: az network public-ip update --dns-name ${{ env.AKS_DNS_LABEL }}${{ env.SUFFIX }} -g ${{ env.AKS_NODES_RESOURCE_GROUP_NAME }}${{ env.SUFFIX }} -n $(az network public-ip list --query "[?starts_with(name,'kubernetes-') ].name" -o tsv -g ${{ env.AKS_NODES_RESOURCE_GROUP_NAME }}${{ env.SUFFIX }})
    # hack: extract the full fqdn / dns label of the aks app's public IP address
    - name: get aks-fqdn
      uses: azure/CLI@v1
      id: get-aks-fqdn
      with:
        # note: There should be a whitespace between ')' and ']'. More details: https://stackoverflow.com/a/59154958
        inlineScript: echo "aksFqdn"="$(az network public-ip list --query "[?starts_with(name,'kubernetes-') ].dnsSettings.fqdn" -o tsv -g ${{ env.AKS_NODES_RESOURCE_GROUP_NAME }}${{ env.SUFFIX }})" >> $GITHUB_OUTPUT
    # install cert-manager
    - name: apply namespace manifest (cert-manager)
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/NamespaceCertManager.yaml
        force: true
    - name: install cert-manager
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }}${{ env.SUFFIX }} --name ${{ env.AKS_CLUSTER_NAME }}${{ env.SUFFIX }}
        kubectl apply --validate=false -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml
    - name: sleep for 30 seconds
      run: sleep 30s
      shell: bash
    - name: apply clusterIssuer manifest
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/ClusterIssuer.yaml
        force: true
    - name: substitute tokens in certificate manifest
      uses: cschleiden/replace-tokens@v1.2
      with:
        tokenPrefix: "{"
        tokenSuffix: "}"
        files: ./src/ContosoTraders.Api.Products/Manifests/Certificate.yaml
      env:
        AKS_FQDN: ${{ steps.get-aks-fqdn.outputs.aksFqdn }}
    - name: apply certificate manifest
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/Certificate.yaml
        force: true
    - name: substitute tokens in ingress manifest
      uses: cschleiden/replace-tokens@v1.2
      with:
        tokenPrefix: "{"
        tokenSuffix: "}"
        files: ./src/ContosoTraders.Api.Products/Manifests/Ingress.yaml
      env:
        AKS_FQDN: ${{ steps.get-aks-fqdn.outputs.aksFqdn }}
    - name: apply ingress manifest
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/Ingress.yaml
        force: true
    - name: apply clusterRole manifest
      uses: Azure/k8s-deploy@v4
      with:
        pull-images: false
        manifests: ./src/ContosoTraders.Api.Products/Manifests/ClusterRole.yaml
        force: true
    - name: set productsApiEndpoint in kv
      uses: azure/CLI@v1
      with:
        inlineScript: az keyvault secret set --vault-name ${{ env.KV_NAME }}${{ env.SUFFIX }} --name productsApiEndpoint --value ${{ steps.get-aks-fqdn.outputs.aksFqdn }} --description "endpoint url (fqdn) of the products api"
    - name: get products api endpoint
      uses: azure/CLI@v1
      id: get-productsApiEndpoint
      with:
        inlineScript: echo "productsApiEndpoint"="$(az keyvault secret show --vault-name ${{ env.KV_NAME }}${{ env.SUFFIX }} --name productsApiEndpoint --query value -o tsv)" >> $GITHUB_OUTPUT

     
  deploy-ui:
    runs-on: ubuntu-latest
    needs: deploy-products-api
    steps:
    - name: set REACT_APP_APIURLSHOPPINGCART
      run: echo "REACT_APP_APIURLSHOPPINGCART"="https://${{ steps.get-cartsApiEndpoint.outputs.cartsApiEndpoint }}/v1" >> $GITHUB_ENV
    - name: set REACT_APP_APIURL
      run: echo "REACT_APP_APIURL"="https://${{ steps.get-productsApiEndpoint.outputs.productsApiEndpoint }}/v1" >> $GITHUB_ENV
    - name: set REACT_APP_B2CCLIENTID
      if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
      run: echo "REACT_APP_B2CCLIENTID"="${{ steps.get-azureAdAppClientId.outputs.azureAdAppClientId }}" >> $GITHUB_ENV
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: npm
        cache-dependency-path: src/ContosoTraders.Ui.Website/package-lock.json
    - name: npm ci
      run: npm ci
      working-directory: src/ContosoTraders.Ui.Website
    - name: npm run build
      run: npm run build
      env:
        REACT_APP_BINGMAPSKEY: ${{ secrets.BINGMAPSKEY }}
      working-directory: src/ContosoTraders.Ui.Website
    - name: deploy ui to storage
      uses: azure/CLI@v1
      with:
        inlineScript: az storage blob sync --account-name '${{ env.UI_STORAGE_ACCOUNT_NAME }}${{ env.SUFFIX }}' -c '$web' -s 'src/ContosoTraders.Ui.Website/build'
    - name: purge ui cdn endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: az cdn endpoint purge --no-wait --content-paths '/*' -n '${{ env.UI_CDN_ENDPOINT_NAME }}${{ env.SUFFIX }}' -g '${{ env.RESOURCE_GROUP_NAME }}${{ env.SUFFIX }}' --profile-name '${{ env.CDN_PROFILE_NAME }}${{ env.SUFFIX }}'
    - name: get ui cdn endpoint
      uses: azure/CLI@v1
      id: get-uiCdnEndpoint
      with:
        inlineScript: echo "uiCdnEndpoint"="$(az keyvault secret show --vault-name ${{ env.KV_NAME }}${{ env.SUFFIX }} --name uiCdnEndpoint --query value -o tsv)" >> $GITHUB_OUTPUT
    - name: register auth callback (UI CDN)
      if: ${{ env.AADUSERNAME != '' && env.AADPASSWORD != '' }}
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az rest \
            --method PATCH \
            --uri https://graph.microsoft.com/v1.0/applications/${{ steps.get-azureAdAppObjId.outputs.azureAdAppObjId }} \
            --headers 'Content-Type=application/json' \
            --body '{"spa":{"redirectUris":["https://localhost:3000/authcallback","http://localhost:3000/authcallback","https://staging.contosotraders.com/authcallback","https://production.contosotraders.com/authcallback","https://cloudtesting.contosotraders.com/authcallback","https://${{ steps.get-uiCdnEndpoint.outputs.uiCdnEndpoint }}/authcallback"]}}'
    - name: display ui cdn endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: echo UI CDN endpoint accessible at https://$(az keyvault secret show --vault-name ${{ env.KV_NAME }}${{ env.SUFFIX }} --name uiCdnEndpoint --query value -o tsv)
